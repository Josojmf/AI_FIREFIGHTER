name: CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      force:
        description: 'Force deployment'
        required: false
        default: false
        type: boolean

env:
  DOCKER_REGISTRY: ghcr.io
  DOCKER_IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    environment: staging
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log into registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}
        tags: |
          type=sha,prefix=,suffix=-staging
          type=ref,event=branch
          type=raw,value=latest-staging

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to Kubernetes
      uses: steebchen/kubectl@v2
      with:
        config: ${{ secrets.KUBECONFIG_STAGING }}
        command: |
          set -x
          kubectl set image deployment/firefighter-app \
            firefighter=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ steps.meta.outputs.tags }}

    - name: Run smoke tests
      run: |
        curl -f http://staging.example.com/health || exit 1
        curl -f http://staging.example.com/api/health || exit 1

    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: production
    needs: deploy-staging
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Verify tag format
      run: |
        if [[ "${{ github.ref }}" =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Tag format is valid"
        else
          echo "Invalid tag format"
          exit 1
        fi

    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        body: |
          Production release ${{ github.ref_name }}
          
          Changes:
          - Automated deployment
          - Quality checks passed
        draft: false
        prerelease: false

    - name: Deploy to production
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          cd /opt/firefighter-app
          git pull origin main
          docker-compose pull
          docker-compose up -d
          sleep 30
          curl -f http://localhost:8000/health || exit 1

    - name: Run canary deployment
      uses: steebchen/kubectl@v2
      with:
        config: ${{ secrets.KUBECONFIG_PRODUCTION }}
        command: |
          kubectl rollout status deployment/firefighter-app
          kubectl get pods -o wide

    - name: Monitor application
      run: |
        for i in {1..10}; do
          response=$(curl -s -o /dev/null -w "%{http_code}" https://production.example.com/health)
          if [ "$response" -eq 200 ]; then
            echo "Application healthy"
            break
          fi
          sleep 10
        done

  post-deploy:
    name: Post-Deploy Verification
    runs-on: ubuntu-latest
    needs: deploy-production
    timeout-minutes: 30

    steps:
    - name: Run integration tests
      run: |
        pip install -r requirements.txt
        pytest tests/integration/ -v

    - name: Load testing
      run: |
        locust -f tests/load_test.py --headless -u 1000 -r 100 -t 5m \
          --host=https://production.example.com

    - name: Check error rates
      run: |
        # Monitor error rates for 5 minutes
        errors=$(curl -s https://production.example.com/metrics | grep 'http_requests_error_total')
        echo "Error rates: $errors"

    - name: Update status page
      uses: iloveitaly/statuspage-action@v1.0.0
      with:
        statuspage-api-key: ${{ secrets.STATUSPAGE_API_KEY }}
        page-id: ${{ secrets.STATUSPAGE_PAGE_ID }}
        component-id: ${{ secrets.STATUSPAGE_COMPONENT_ID }}
        status: operational