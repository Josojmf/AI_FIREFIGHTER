name: CD - Build, Push & Deploy

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - "**.md"
      - ".github/**"
  workflow_dispatch:

# Evita solapes si hay múltiples pushes seguidos
concurrency:
  group: cd-${{ github.ref }}
  cancel-in-progress: true

# Necesario para publicar en GHCR y leer el repo
permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  # Ajusta el nombre de la imagen si tu repo/imagen se llama distinto
  # Formato recomendado: ghcr.io/<usuario_ghcr>/<nombre-imagen>
  IMAGE_NAME: ${{ secrets.GHCR_USER }}/ai-firefighter-frontend
  # Ruta en el servidor donde vive tu proyecto (docker-compose.yml)
  APP_DIR: /opt/emergency
  # Nombre del archivo docker compose en el servidor
  COMPOSE_FILE: docker-compose.yml

jobs:
  build-and-push:
    name: Build & Push image to GHCR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # (Opcional) establece metadatos de etiquetas (latest + sha corto)
      - name: Extract short SHA
        id: vars
        run: echo "short_sha=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GHCR_USER }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Set image tags
        id: tags
        run: |
          echo "latest=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT
          echo "sha=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.short_sha }}" >> $GITHUB_OUTPUT

      - name: Build and push (latest)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ steps.tags.outputs.latest }}
            ${{ steps.tags.outputs.sha }}

  deploy:
    name: Deploy via SSH
    runs-on: ubuntu-latest
    needs: build-and-push
    timeout-minutes: 30
    steps:
      - name: Checkout (for possible scripts/templates)
        uses: actions/checkout@v4

      - name: Add known_hosts (si tienes el secreto configurado)
        if: ${{ secrets.PRODUCTION_KNOWN_HOSTS != '' }}
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PRODUCTION_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      # Si no tienes PRODUCTION_KNOWN_HOSTS, puedes confiar en strictHostKeyChecking=no:
      # (appleboy/ssh-action lo permite con 'timeout' y 'script_stop', pero mejor known_hosts)

      - name: Remote deploy (docker compose pull & up)
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER || 'root' }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: 22
          script_stop: true
          envs: GHCR_USER,GHCR_PAT,APP_DIR,COMPOSE_FILE,REGISTRY,IMAGE_NAME
          script: |
            set -euo pipefail

            echo "==> Accediendo a ${APP_DIR}"
            mkdir -p "${APP_DIR}"
            cd "${APP_DIR}"

            echo "==> Login a GHCR (para poder hacer pull de imágenes privadas)"
            echo "${GHCR_PAT}" | docker login "${REGISTRY}" -u "${GHCR_USER}" --password-stdin

            # (Opcional) Traer el último docker-compose.yml desde el repo si lo publicas con el job de build
            # Aquí asumimos que el servidor ya tiene el docker-compose.yml bueno en ${APP_DIR}/${COMPOSE_FILE}

            echo "==> Actualizando servicios"
            docker compose -f "${COMPOSE_FILE}" pull
            docker compose -f "${COMPOSE_FILE}" up -d --remove-orphans

            echo "==> Limpiando imágenes colgantes"
            docker image prune -f

            echo "==> Comprobación rápida de estado"
            docker compose -f "${COMPOSE_FILE}" ps
