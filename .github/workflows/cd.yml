name: CD Pipeline - Digital Ocean

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment'
        required: false
        default: false
        type: boolean

env:
  DOCKER_REGISTRY: ghcr.io
  DOCKER_IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log into GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./FO
        file: ./FO/Dockerfile
        push: true
        tags: |
          ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}/frontend:main
          ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}/frontend:latest
          ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}/frontend:${{ github.sha }}
        cache-from: type=gha,scope=frontend
        cache-to: type=gha,mode=max,scope=frontend

    - name: Build and push Backend image
      uses: docker/build-push-action@v5
      with:
        context: ./API
        file: ./API/Dockerfile
        push: true
        tags: |
          ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}/backend:main
          ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}/backend:latest
          ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}/backend:${{ github.sha }}
        cache-from: type=gha,scope=backend
        cache-to: type=gha,mode=max,scope=backend

    - name: Build and push Backoffice image
      uses: docker/build-push-action@v5
      with:
        context: ./backoffice
        file: ./backoffice/Dockerfile
        push: true
        tags: |
          ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}/backoffice:main
          ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}/backoffice:latest
          ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}/backoffice:${{ github.sha }}
        cache-from: type=gha,scope=backoffice
        cache-to: type=gha,mode=max,scope=backoffice

  deploy:
    name: Deploy to Digital Ocean
    runs-on: ubuntu-latest
    needs: build
    environment: production
    permissions:
      contents: read
      packages: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.PRODUCTION_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts

    - name: Create deployment directory
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} "
          sudo mkdir -p /opt/firefighter-app
          sudo chown -R ${{ secrets.PRODUCTION_USER }}:${{ secrets.PRODUCTION_USER }} /opt/firefighter-app
        "

    - name: Copy deployment files
      run: |
        # Create .env file with secrets
        cat > .env.production << EOF
        DB_USERNAME=${{ secrets.DB_USERNAME }}
        DB_PASSWORD=${{ secrets.DB_PASSWORD }}
        DB_CLUSTER=${{ secrets.DB_CLUSTER }}
        NODE_ENV=production
        FRONTEND_IMAGE=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}/frontend:main
        BACKEND_IMAGE=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}/backend:main
        BACKOFFICE_IMAGE=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}/backoffice:main
        EOF
        
        scp -o StrictHostKeyChecking=no docker-compose.prod.yml ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }}:/opt/firefighter-app/docker-compose.yml
        scp -o StrictHostKeyChecking=no .env.production ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }}:/opt/firefighter-app/.env

    - name: Deploy application
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} "
          cd /opt/firefighter-app
          
          # Login to GitHub Container Registry
          echo '${{ secrets.GITHUB_TOKEN }}' | docker login ${{ env.DOCKER_REGISTRY }} -u ${{ github.actor }} --password-stdin
          
          # Use Docker Compose V2
          docker compose down || true
          docker compose up -d --pull always
          
          # Wait for services
          sleep 30
          
          # Clean up
          docker system prune -f
        "

    - name: Health check
      run: |
        # More lenient health checks
        response_frontend=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.PRODUCTION_HOST }}:8000/health || echo "000")
        response_backend=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.PRODUCTION_HOST }}:5000/api/health || echo "000")
        
        echo "Frontend: $response_frontend"
        echo "Backend: $response_backend"
        
        # Accept any 2xx/3xx response
        if [[ "$response_frontend" =~ ^[23][0-9][0-9]$ ]] || [[ "$response_backend" =~ ^[23][0-9][0-9]$ ]]; then
          echo "Services are responding"
          exit 0
        else
          echo "Services not responding properly"
          exit 1
        fi

    - name: Cleanup SSH
      if: always()
      run: |
        rm -f ~/.ssh/id_rsa

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: always()

    steps:
    - name: Notify Success
      if: needs.deploy.result == 'success'
      run: |
        echo "Deployment successful!"
        echo "Frontend: http://${{ secrets.PRODUCTION_HOST }}:8000"
        echo "Backend API: http://${{ secrets.PRODUCTION_HOST }}:5000"
        echo "Backoffice: http://${{ secrets.PRODUCTION_HOST }}:3001"

    - name: Notify Failure
      if: needs.deploy.result == 'failure'
      run: |
        echo "Deployment failed!"
        exit 1