name: CD Pipeline - Digital Ocean

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment'
        required: false
        default: false
        type: boolean

env:
  DOCKER_REGISTRY: ghcr.io
  DOCKER_IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log into GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for Frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}/frontend
        tags: |
          type=sha,prefix={{sha}}-
          type=ref,event=branch
          type=raw,value=latest

    - name: Extract metadata for Backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}/backend
        tags: |
          type=sha,prefix={{sha}}-
          type=ref,event=branch
          type=raw,value=latest

    - name: Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./FO
        file: ./FO/Dockerfile
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha,scope=frontend
        cache-to: type=gha,mode=max,scope=frontend

    - name: Build and push Backend image
      uses: docker/build-push-action@v5
      with:
        context: ./API
        file: ./API/Dockerfile
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha,scope=backend
        cache-to: type=gha,mode=max,scope=backend

    outputs:
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
      backend-image: ${{ steps.meta-backend.outputs.tags }}

  deploy:
    name: Deploy to Digital Ocean
    runs-on: ubuntu-latest
    needs: build
    environment: production
    permissions:
      contents: read
      packages: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.PRODUCTION_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts

    - name: Create deployment directory
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} "
          mkdir -p /opt/firefighter-app
          cd /opt/firefighter-app
        "

    - name: Copy deployment files
      run: |
        # Create .env file with secrets
        cat > .env.production << EOF
        DB_USERNAME=${{ secrets.DB_USERNAME }}
        DB_PASSWORD=${{ secrets.DB_PASSWORD }}
        DB_CLUSTER=${{ secrets.DB_CLUSTER }}
        NODE_ENV=production
        API_BASE_URL=http://${{ secrets.PRODUCTION_HOST }}:5000/api
        EOF
        
        scp -o StrictHostKeyChecking=no docker-compose.prod.yml ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }}:/opt/firefighter-app/docker-compose.yml
        scp -o StrictHostKeyChecking=no .env.production ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }}:/opt/firefighter-app/.env

    - name: Deploy application
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} "
          cd /opt/firefighter-app
          
          # Login to GitHub Container Registry
          echo '${{ secrets.GITHUB_TOKEN }}' | docker login ${{ env.DOCKER_REGISTRY }} -u ${{ github.actor }} --password-stdin
          
          # Set environment variables for docker-compose
          export FRONTEND_IMAGE='${{ needs.build.outputs.frontend-image }}'
          export BACKEND_IMAGE='${{ needs.build.outputs.backend-image }}'
          
          # Pull latest images
          docker-compose pull
          
          # Stop existing containers
          docker-compose down
          
          # Start new containers
          docker-compose up -d
          
          # Clean up old images
          docker system prune -f
        "

    - name: Wait for services to be ready
      run: |
        echo "Waiting for services to start..."
        sleep 30

    - name: Health check
      run: |
        # Test Frontend
        response_frontend=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.PRODUCTION_HOST }}:8000/health || echo "000")
        echo "Frontend health check: $response_frontend"
        
        # Test Backend API
        response_backend=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.PRODUCTION_HOST }}:5000/api/health || echo "000")
        echo "Backend health check: $response_backend"
        
        # Verify essential services are responding
        if [[ "$response_frontend" != "200" || "$response_backend" != "200" ]]; then
          echo "Critical services failed health check"
          exit 1
        fi
        
        echo " Essential services are healthy"

    - name: Cleanup SSH
      if: always()
      run: |
        rm -f ~/.ssh/id_rsa

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: always()

    steps:
    - name: Notify Success
      if: needs.deploy.result == 'success'
      run: |
        echo " Deployment successful!"
        echo "Frontend: http://${{ secrets.PRODUCTION_HOST }}:8000"
        echo "Backend API: http://${{ secrets.PRODUCTION_HOST }}:5000"

    - name: Notify Failure
      if: needs.deploy.result == 'failure'
      run: |
        echo " Deployment failed!"
        exit 1
