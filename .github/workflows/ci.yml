name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1' # Weekly on Monday at 2 AM

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.10'
  NODE_VERSION: '18'
  DOCKER_REGISTRY: ghcr.io
  # Convert repository name to lowercase for Docker compatibility
  DOCKER_IMAGE_NAME: ${{ github.repository_owner }}/ai_firefighter

jobs:
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'api/bo/package-lock.json'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        for req_file in "FO/requirements.txt" "API/requirements.txt" "requirements.txt"; do
          if [ -f "$req_file" ]; then
            echo "Installing from $req_file"
            pip install -r "$req_file"
          fi
        done

    - name: Install Node.js dependencies
      run: |
        if [ -f "api/bo/package.json" ]; then
          cd api/bo && npm ci --ignore-scripts
        fi

    - name: Run Python linters
      run: |
        pip install flake8 black isort mypy bandit
        for dir in "FO" "API"; do
          if [ -d "$dir" ]; then
            echo "Linting $dir directory..."
            flake8 "$dir"/ --count --select=E9,F63,F7,F82 --show-source --statistics || true
            black "$dir"/ --check --diff || true
            isort "$dir"/ --check-only --diff || true
            bandit -r "$dir"/ -ll || true
          fi
        done

    - name: Run JavaScript/TypeScript linters
      run: |
        if [ -f "api/bo/package.json" ]; then
          cd api/bo && npm run lint || true
        fi

    - name: Run tests with coverage
      run: |
        pip install pytest pytest-cov
        for test_dir in "tests" "FO/tests" "API/tests"; do
          if [ -d "$test_dir" ]; then
            pytest "$test_dir"/ --cov=./ --cov-report=xml --cov-report=html -v || true
            break
          fi
        done
        if ! ls coverage.* 1> /dev/null 2>&1; then
          echo "No test directory found, skipping tests"
        fi

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: |
          coverage.xml
          htmlcov/
      continue-on-error: true

    - name: CodeQL Analysis Init
      uses: github/codeql-action/init@v3
      with:
        languages: python, javascript

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      continue-on-error: true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: code-quality
    timeout-minutes: 45

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Run security scans
      run: |
        pip install safety
        for req_file in "FO/requirements.txt" "API/requirements.txt" "requirements.txt"; do
          if [ -f "$req_file" ]; then
            echo "Scanning $req_file..."
            safety check -r "$req_file" --full-report || true
          fi
        done

    - name: Dependency vulnerability scan
      uses: actions/dependency-review-action@v3
      continue-on-error: true

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: [code-quality]
    strategy:
      matrix:
        component: [frontend, backend, backoffice]
        python-version: ['3.10']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python ${{ matrix.python-version }}
      if: matrix.component != 'backoffice'
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Setup Node.js
      if: matrix.component == 'backoffice'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Frontend dependencies
      if: matrix.component == 'frontend'
      run: |
        if [ -f "FO/requirements.txt" ]; then
          pip install -r FO/requirements.txt
        fi

    - name: Install Backend dependencies
      if: matrix.component == 'backend'
      run: |
        if [ -f "API/requirements.txt" ]; then
          pip install -r API/requirements.txt
        fi

    - name: Install Backoffice dependencies
      if: matrix.component == 'backoffice'
      run: |
        if [ -f "api/bo/package.json" ]; then
          cd api/bo && npm ci && npm run build
        fi

    - name: Build Docker images
      if: matrix.python-version == '3.10'
      run: |
        case "${{ matrix.component }}" in
          frontend)
            if [ -f "FO/Dockerfile" ]; then
              docker build -t ${{ env.DOCKER_IMAGE_NAME }}-frontend:test ./FO
            fi
            ;;
          backend)
            if [ -f "API/Dockerfile" ]; then
              docker build -t ${{ env.DOCKER_IMAGE_NAME }}-backend:test ./API
            fi
            ;;
          backoffice)
            if [ -f "api/bo/Dockerfile" ]; then
              docker build -t ${{ env.DOCKER_IMAGE_NAME }}-backoffice:test ./api/bo
            fi
            ;;
        esac
        docker images