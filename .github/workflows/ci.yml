name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1' # Weekly on Monday at 2 AM

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.10'
  NODE_VERSION: '18'
  DOCKER_REGISTRY: ghcr.io
  DOCKER_IMAGE_NAME: ${{ github.repository }}

jobs:
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        npm ci --ignore-scripts

    - name: Run linters
      run: |
        pip install flake8 black isort mypy bandit
        # Python linting
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        black . --check --diff
        isort . --check-only --diff
        mypy . --ignore-missing-imports
        bandit -r . -ll

        # JavaScript linting
        npm run lint || true

    - name: Run tests with coverage
      run: |
        pip install pytest pytest-cov
        pytest tests/ --cov=./ --cov-report=xml --cov-report=html -v

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.xml

    - name: CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        languages: python, javascript
        queries: security-and-quality

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: code-quality
    timeout-minutes: 45

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security scans
      run: |
        pip install safety
        safety check --full-report
        
        # Docker security scan if Dockerfile exists
        if [ -f "Dockerfile" ]; then
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy:latest image --severity HIGH,CRITICAL ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}
        fi

    - name: Dependency vulnerability scan
      uses: actions/dependency-review-action@v3

    - name: Run OWASP ZAP scan
      uses: zaproxy/action-full-scan@v0.10.0
      if: github.event_name == 'schedule'
      with:
        target: 'http://localhost:8000'
        rules_file_name: '.zap_rules.tsv'
        cmd_options: '-a'

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: [code-quality, security-scan]
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
        os: [ubuntu-latest, windows-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest pytest-asyncio

    - name: Run tests on ${{ matrix.os }}
      run: |
        pytest tests/ -x --tb=short

    - name: Build Docker image
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
      run: |
        docker build -t ${{ env.DOCKER_IMAGE_NAME }}:test .
        docker images

  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: build-and-test
    timeout-minutes: 60

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: pip install -r requirements.txt locust

    - name: Run performance tests
      run: |
        locust -f tests/performance/locustfile.py --headless -u 100 -r 10 -t 10m \
          --html performance-report.html

    - name: Upload performance report
      uses: actions/upload-artifact@v4
      with:
        name: performance-report
        path: performance-report.html