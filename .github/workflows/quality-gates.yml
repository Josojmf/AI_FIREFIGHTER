name: Quality Gates

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types: [completed]
  workflow_dispatch:

jobs:
  quality-assessment:
    name: Quality Assessment
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: coverage-report
        path: artifacts/
      continue-on-error: true

    - name: Analyze code coverage
      run: |
        pip install coverage
        if [ -f "artifacts/coverage.xml" ]; then
          coverage xml -i
          coverage report --fail-under=60 || echo "Coverage below 60% threshold"
        else
          echo "No coverage report found, skipping coverage analysis"
        fi

    - name: Check code quality metrics
      run: |
        pip install flake8 radon
        
        # Count Python files
        python_files=$(find . -name "*.py" | wc -l)
        echo "Python files found: $python_files"
        
        # Basic quality metrics
        if [ $python_files -gt 0 ]; then
          echo "Running quality checks..."
          flake8_issues=$(flake8 . --count --statistics | tail -1 | awk '{print $1}' || echo "0")
          complexity=$(radon cc . -a | grep "Average complexity" | awk '{print $3}' || echo "N/A")
          
          echo "Flake8 issues: $flake8_issues"
          echo "Average complexity: $complexity"
        else
          echo "No Python files found for quality analysis"
          flake8_issues=0
          complexity="N/A"
        fi

    - name: Generate quality report
      run: |
        echo "# Quality Report" > quality-report.md
        echo "Generated on: $(date)" >> quality-report.md
        echo "" >> quality-report.md
        
        if [ -f "artifacts/coverage.xml" ]; then
          coverage_percent=$(grep -o 'line-rate="[^"]*"' artifacts/coverage.xml | head -1 | cut -d'"' -f2 | awk '{print $1*100}' || echo "N/A")
          echo "## Coverage: ${coverage_percent}%" >> quality-report.md
        else
          echo "## Coverage: Not available" >> quality-report.md
        fi
        
        echo "## Lint Issues: ${flake8_issues:-0}" >> quality-report.md
        echo "## Average Complexity: ${complexity:-N/A}" >> quality-report.md
        echo "" >> quality-report.md
        echo "## Status: $([ ${flake8_issues:-0} -lt 50 ] && echo "✅ PASS" || echo "⚠️ NEEDS ATTENTION")" >> quality-report.md

    - name: Upload quality report
      uses: actions/upload-artifact@v4
      with:
        name: quality-report
        path: quality-report.md

  documentation-check:
    name: Documentation Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Check documentation coverage
      run: |
        pip install interrogate
        python_files=$(find . -name "*.py" | wc -l)
        
        if [ $python_files -gt 0 ]; then
          interrogate --ignore-nested-functions --ignore-private --fail-under=50 . || echo "Documentation coverage below 50%"
        else
          echo "No Python files found for documentation analysis"
        fi

    - name: Check for README and documentation
      run: |
        echo "# Documentation Check" > doc-report.md
        
        if [ -f "README.md" ]; then
          echo "✅ README.md found" >> doc-report.md
        else
          echo "❌ README.md missing" >> doc-report.md
        fi
        
        if [ -d "docs/" ]; then
          echo "✅ docs/ directory found" >> doc-report.md
        else
          echo "❌ docs/ directory missing" >> doc-report.md
        fi
        
        # Count documentation files
        doc_files=$(find . -name "*.md" | wc -l)
        echo "📄 Documentation files found: $doc_files" >> doc-report.md

    - name: Upload documentation report
      uses: actions/upload-artifact@v4
      with:
        name: documentation-report
        path: doc-report.md