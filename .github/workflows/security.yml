name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 3 * * *' # Daily at 3 AM

jobs:
  sast:
    name: SAST Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Semgrep SAST
      uses: returntocorp/semgrep-action@v1
      with:
        config: p/ci
      continue-on-error: true

    - name: Run Gitleaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true

    - name: TruffleHog secrets scan
      run: |
        docker run --rm -v "$PWD":/pwd \
          trufflesecurity/trufflehog:latest \
          github --repo https://github.com/${{ github.repository }} --only-verified
      continue-on-error: true

  container-security:
    name: Container Security
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Frontend Docker image
      run: |
        if [ -f "FO/Dockerfile" ]; then
          docker build -t firefighter-frontend ./FO
        fi

    - name: Build Backend Docker image
      run: |
        if [ -f "API/Dockerfile" ]; then
          docker build -t firefighter-backend ./API
        fi

    - name: Build Backoffice Docker image
      run: |
        if [ -f "backoffice/Dockerfile" ]; then
          docker build -t firefighter-backoffice ./backoffice
        fi

    - name: Trivy vulnerability scan - Frontend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'firefighter-frontend'
        format: 'sarif'
        output: 'trivy-frontend-results.sarif'
        severity: 'HIGH,CRITICAL'
      continue-on-error: true

    - name: Trivy vulnerability scan - Backend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'firefighter-backend'
        format: 'sarif'
        output: 'trivy-backend-results.sarif'
        severity: 'HIGH,CRITICAL'
      continue-on-error: true

    - name: Trivy vulnerability scan - Backoffice
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'firefighter-backoffice'
        format: 'sarif'
        output: 'trivy-backoffice-results.sarif'
        severity: 'HIGH,CRITICAL'
      continue-on-error: true

    - name: Upload Trivy results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-frontend-results.sarif'
      continue-on-error: true

    - name: Upload Backend Trivy results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-backend-results.sarif'
      continue-on-error: true

    - name: Upload Backoffice Trivy results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-backoffice-results.sarif'
      continue-on-error: true

  dependency-scanning:
    name: Dependency Scanning
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Run Safety check
      run: |
        pip install safety
        # Check Python dependencies
        if [ -f "FO/requirements.txt" ]; then
          echo "Scanning FO/requirements.txt..."
          safety check -r FO/requirements.txt --json --output safety-fo-report.json || true
        fi
        if [ -f "API/requirements.txt" ]; then
          echo "Scanning API/requirements.txt..."
          safety check -r API/requirements.txt --json --output safety-api-report.json || true
        fi
        if [ -f "requirements.txt" ]; then
          echo "Scanning requirements.txt..."
          safety check -r requirements.txt --json --output safety-root-report.json || true
        fi

    - name: Run npm audit
      run: |
        if [ -f "backoffice/package.json" ]; then
          cd backoffice
          npm audit --json > npm-audit.json || true
        fi

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          safety-*-report.json
          backoffice/npm-audit.json
      continue-on-error: true

  sbom-generation:
    name: SBOM Generation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build images for SBOM
      run: |
        if [ -f "FO/Dockerfile" ]; then
          docker build -t firefighter-frontend ./FO
        fi
        if [ -f "API/Dockerfile" ]; then
          docker build -t firefighter-backend ./API
        fi
        if [ -f "backoffice/Dockerfile" ]; then
          docker build -t firefighter-backoffice ./backoffice
        fi

    - name: Generate SBOM with Syft - Frontend
      uses: anchore/sbom-action@v0
      with:
        image: firefighter-frontend
        format: spdx-json
        output-file: frontend-bom.spdx.json
      continue-on-error: true

    - name: Generate SBOM with Syft - Backend
      uses: anchore/sbom-action@v0
      with:
        image: firefighter-backend
        format: spdx-json
        output-file: backend-bom.spdx.json
      continue-on-error: true

    - name: Generate SBOM with Syft - Backoffice
      uses: anchore/sbom-action@v0
      with:
        image: firefighter-backoffice
        format: spdx-json
        output-file: backoffice-bom.spdx.json
      continue-on-error: true

    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: sbom
        path: |
          frontend-bom.spdx.json
          backend-bom.spdx.json
          backoffice-bom.spdx.json
      continue-on-error: true