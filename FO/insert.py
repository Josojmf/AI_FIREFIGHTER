import os
from datetime import datetime, timedelta, timezone
from pymongo import MongoClient
import random

# Configuraci√≥n de MongoDB
client = MongoClient("mongodb+srv://joso:XyGItdDKpWkfJfjT@cluster0.yzzh9ig.mongodb.net/?retryWrites=true&w=majority&appName=Firefighter")
db = client["FIREFIGHTER"]
cards_col = db["leitner_cards"]

# Datos de tarjetas CORREGIDOS (todas con 'front' y 'back')
tarjetas_fuego = [
    {"front": "Punto de inflamaci√≥n", "back": "Temperatura m√≠nima donde un l√≠quido emite vapores que se inflaman con chispa"},
    {"front": "Tetraedro del fuego", "back": "Combustible + Ox√≠geno + Calor + Reacci√≥n en cadena"},
    {"front": "Clase A fuego", "back": "Materiales s√≥lidos combustibles (madera, papel, tela)"},
    {"front": "Clase B fuego", "back": "L√≠quidos inflamables (gasolina, aceite, pintura)"},
    {"front": "Clase C fuego", "back": "Equipos el√©ctricos energizados"},
    {"front": "Clase D fuego", "back": "Metales combustibles (magnesio, titanio, sodio)"},
    {"front": "Clase K fuego", "back": "Aceites y grasas de cocina"},
    {"front": "EXTINTOR ABC", "back": "Polvo qu√≠mico seco para Clases A, B, C"},
    {"front": "EXTINTOR CO2", "back": "Di√≥xido de carbono para Clases B y C"},
    {"front": "EXTINTOR AGUA", "back": "Solo para Clase A, nunca para el√©ctricos"},
    {"front": "PROTOCOLO RACE", "back": "Rescue, Alarm, Contain, Extinguish/Evacuate"},
    {"front": "PROTOCOLO PASS", "back": "Pull, Aim, Squeeze, Sweep (uso extintor)"},
    {"front": "Presi√≥n manguera", "back": "3-5 bar para ataque, 7-10 bar para suministro"},
    {"front": "Di√°metro manguera", "back": "45mm abastecimiento, 25mm/70mm ataque"},
    {"front": "Boquilla niebla", "back": "Protecci√≥n t√©rmica, enfriamiento, control gases"},
    {"front": "Boquilla chorro", "back": "Alcance m√°ximo, penetraci√≥n en materiales"},
    {"front": "Flashover", "back": "Ignici√≥n s√∫bita de todos los combustibles en ambiente"},
    {"front": "Backdraft", "back": "Explosi√≥n por entrada de ox√≠geno en espacio confinado"},
    {"front": "BLEVE", "back": "Explosi√≥n de recipiente por calentamiento l√≠quido"},
    {"front": "LUNAR protocolo", "back": "Location, Unit, Name, Assignment, Resources"},
    {"front": "MAYDAY protocolo", "back": "Emergencia personal, repetir 3 veces"},
    {"front": "UTM coordenadas", "back": "Sistema coordenadas para ubicaci√≥n emergencias"},
    {"front": "Triage colores", "back": "Rojo: urgente, Amarillo: espera, Verde: leve, Negro: fallecido"},
    {"front": "RCP ratio", "back": "30 compresiones : 2 ventilaciones"},
    {"front": "DEA uso", "back": "Analizar, Desfibrilar, RCP inmediato despu√©s"},
    {"front": "Hidrante clases", "back": "Clase A: ‚â•1000 L/min, Clase B: 500-1000 L/min, Clase C: <500 L/min"},
    {"front": "Bomba centr√≠fuga", "back": "Principio: fuerza centr√≠fuga, cebado necesario"},
    {"front": "Nivel EPI", "back": "Nivel 1: riesgo bajo, Nivel 2: riesgo medio, Nivel 3: riesgo alto"},
    {"front": "SCBA presi√≥n", "back": "200-300 bar presi√≥n carga, 50 bar presi√≥n alarma"},
    {"front": "SCBA autonom√≠a", "back": "30-60 minutos seg√∫n consumo y presi√≥n"},
    {"front": "Radial patr√≥n", "back": "Comunicaci√≥n entre bomberos mismo grupo"},
    {"front": "TAC patr√≥n", "back": "Comunicaci√≥n oficial entre grupos y mando"},
    {"front": "IC mando", "back": "Incident Commander, responsable operaci√≥n"},
    {"front": "Sectorizaci√≥n", "back": "Dividir incendio en sectores manejables"},
    {"front": "Ventilaci√≥n vertical", "back": "Aberturas en techo para escape calor/gases"},
    {"front": "Ventilaci√≥n horizontal", "back": "Aberturas en paredes para control flujos"},
    {"front": "PPV ventilaci√≥n", "back": "Presi√≥n positiva ventiladores, empuja humo"},
    {"front": "NPV ventilaci√≥n", "back": "Presi√≥n negativa, extrae humo"},
    {"front": "Forzamiento puertas", "back": "Irving, Halligan, ariete hidr√°ulico"},
    {"front": "Forzamiento ventanas", "back": "Martillo vidrio, cinta seguridad, gancho"},
    {"front": "B√∫squeda primaria", "back": "R√°pida, vocal, visual, sistem√°tica"},
    {"front": "B√∫squeda secundaria", "back": "Exhaustiva, met√≥dica, marcaje puertas"},
    {"front": "Marcaje puertas", "back": "X: buscada, /: sector, ‚Üí: direcci√≥n, #: v√≠ctimas"},
    {"front": "Linea vida", "back": "Cuerda gu√≠a para orientaci√≥n humo cero visibilidad"},
    {"front": "Cuerda nudos", "back": "As de gu√≠a, ballestrinque, ocho, pescador"},
    {"front": "Rappel t√©cnicas", "back": "D√ºlfersitz, descensor ocho, ASAP bloqueador"},
    {"front": "Escalera tipos", "back": "Extension, gancho, tejado, transformable"},
    {"front": "Escalera √°ngulo", "back": "75¬∞ inclinaci√≥n √≥ptima, 4:1 ratio base-altura"},
    {"front": "Andamio colapsado", "back": "Tri√°ngulo vida, no mover, apuntalar"},
    {"front": "VEH√çCULO rescate", "back": "Estabilizar, desconectar bater√≠a, acceso v√≠ctimas"},
    {"front": "Herramientas hidr√°ulicas", "back": "Cizalla, expansor, ram, combinada"},
    {"front": "Corte vehicular", "back": "Postes A-B-C, techo, panel pies, volante"},
    {"front": "Desencarcelamiento", "back": "Acceso, espacio, liberaci√≥n, extracci√≥n"},
    {"front": "Material peligroso", "back": "Clases 1-9, UN number, placas colores"},
    {"front": "F√≥rmula caudal", "back": "Q = A √ó V (Caudal = √Årea √ó Velocidad)"},
    {"front": "F√≥rmula presi√≥n", "back": "P = œÅ √ó g √ó h (Presi√≥n = densidad √ó gravedad √ó altura)"},
    {"front": "F√≥rmula potencia", "back": "P = Q √ó H √ó œÅ √ó g (Potencia = Caudal √ó Altura √ó densidad √ó gravedad)"},
    {"front": "NRB mascarilla", "back": "Negativa, Regular, Bloqueo - tipos sellado"},
    {"front": "APR respirador", "back": "Air Purifying Respirator, filtros part√≠culas"},
    {"front": "SCBA autonom√≠a", "back": "30-45 min trabajo intenso, 60+ min reposo"},
    {"front": "Check SCBA", "back": "Presi√≥n, alarmas, fugas, v√°lvulas, comunicaci√≥n"},
    {"front": "Donning SCBA", "back": "60 segundos m√°ximo, t√©cnica over-the-head"},
    {"front": "Doffing SCBA", "back": "Controlado, evitar contaminaci√≥n, revisi√≥n"},
    {"front": "Buddy breathing", "back": "Compartir SCBA en emergencia, protocolo estricto"},
    {"front": "Emergency procedures", "back": "Fallo SCBA: retreat, shelter, MAYDAY"}
]

# Usuarios objetivo
usuarios = ["test", "admin", "submit", "joso", "bombero1", "bombero2", "instructor"]

print("üöÄ Insertando tarjetas masivas...")

insertadas = 0
errores = 0
now = datetime.now(timezone.utc)

for usuario in usuarios:
    for i in range(150):  # 150 tarjetas por usuario
        # Seleccionar tarjeta aleatoria
        tarjeta_data = random.choice(tarjetas_fuego)
        
        # Box aleatorio entre 1-6
        box = random.randint(1, 6)
        
        # Fecha due aleatoria en los pr√≥ximos 60 d√≠as
        dias_aleatorios = random.randint(0, 60)
        due_date = now + timedelta(days=dias_aleatorios)
        
        # Deck aleatorio
        decks = ["general", "incendios", "rescate", "materiales", "protocolos", "primeros_auxilios", "equipos", "formulas"]
        deck = random.choice(decks)
        
        # Insertar tarjeta
        try:
            cards_col.insert_one({
                "user": usuario,
                "deck": deck,
                "front": f"{tarjeta_data['front']} #{i+1:03d}",
                "back": tarjeta_data['back'],
                "box": box,
                "due": due_date,
                "created_at": now,
                "history": [],
                "last_reviewed": now if random.random() > 0.7 else None
            })
            insertadas += 1
            if insertadas % 100 == 0:
                print(f"üì¶ {insertadas} tarjetas insertadas...")
                
        except Exception as e:
            errores += 1
            # Ignorar duplicados
            if "duplicate" not in str(e).lower():
                print(f"‚ö†Ô∏è Error en tarjeta {i+1}: {e}")

print(f"\n‚úÖ COMPLETADO: {insertadas} tarjetas insertadas, {errores} errores")
print("üìä Distribuci√≥n por usuario:")
for usuario in usuarios:
    count = cards_col.count_documents({"user": usuario})
    print(f"   {usuario}: {count} tarjetas")

# Estad√≠sticas adicionales
total_tarjetas = cards_col.count_documents({})
print(f"\nüìà Total en base de datos: {total_tarjetas} tarjetas")